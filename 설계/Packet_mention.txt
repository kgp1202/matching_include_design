 Communication 클래스는 실질적인 Http Request를 보내는 클래스이다. 이 클래스가 Packet의 상태 관리, 서버에 데이터 전달을 
책임진다.
 Packet 클래스는 하나하나의 Request를 의미한다. Packet에는 보내기전 상태, AJAX로 계속 matching을 체크하는 상태, matching이 완료된
상태 3가지의 상태를 가지며 이에 따라서 toString()을 가진다. 

 여기서 Communication 클래스의 Check()함수는 큐에 들어있는 패킷들을 전부 JSON형태로 변환하여 서버에 보낸다. 이러한 구조를 통해서
여러개의 Request를 처리해야 하는 상황에 유리하다. Matching이 여러번 가능한 경우를 생각해보았을 때, 큐를 이용해서 하나의 Request씩
처리하는 경우와 비교해보았다. 
 Request를 묶어서 처리하게 되면, 장점은 큐에 있는 요청들을 한번에 묶어서 처리하기 때문에 여러번의 Http연결이 필요없이 한번의 연결로
여러개의 Request들을 처리할 수 있다. 또한 클라이언트 입장에서도 하나로 묶어서 처리하기 때문에 더 가벼운 어플리케이션이 가능하다.
하지만 서버에서 묶어놓은 정보들을 처리해야하기 때문에 서버에 무리를 줄 수 있다. 또한, 큐에 있던 요청들을 전부 처리한 후에 Response를 
보내기 때문에 처리시간이 늘어날 수 있다. 하나씩 Request를 처리하는 경우는 위와 반대이다.
 Matching에서는 대부분의 Http연결이 AJAX이기 때문에 서버측의 처리가 매우 단순하다. 따라서 서버에서의 처리가 그리 무리가 되지 않고
오히려 Http Connection을 맺는 과정의 연산이 더 클것으로 생각되어져서 여러개의 Request를 묶어서 처리하기로 하였다.


  